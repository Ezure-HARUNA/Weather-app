{"version":3,"sources":["Form.jsx","Weather.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","placeholder","name","Div1","styled","div","Div2","Div3","Div4","Div5","Weather","className","class","city","country","date","dayjs","format","temperature","description","error","recommendation","App","React","useState","weather","setWeather","APIKEY","e","a","target","elements","value","preventDefault","fetch","then","res","json","data","apiData","sys","dt","Math","round","main","temp","recommendations","id","icon","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a1ac5f89.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" placeholder=\"city\" name=\"city\"/>\r\n            <input type=\"text\" placeholder=\"country\" name=\"country\"/>\r\n            <button>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport dayjs from \"dayjs\";\r\nimport styled from \"styled-components\"\r\n\r\nconst Div1 =styled.div`\r\n\r\n.card{\r\n  width: 360px;\r\n  height: auto;\r\n}\r\n\r\n.card-skin{\r\n  overflow: hidden;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 15px rgba(0,0,0,.2);\r\n}\r\n\r\n`\r\n\r\nconst Div2 = styled.div`\r\n.card__imgframe{\r\n  width: 100%;\r\n  height: auto;\r\n  padding-top: 56.25%;\r\n  background-size: cover;\r\n  box-sizing: border-box;\r\n}\r\n`\r\nconst Div3 = styled.div`\r\n.card__textbox{\r\n  width: 100%;\r\n  height: auto;\r\n  padding: 20px 18px;\r\n  background: #ffffff;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.card__textbox > * + *{\r\n  margin-top: 10px;\r\n}\r\n`\r\nconst Div4 = styled.div`\r\n.card__titletext{\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  line-height: 125%;\r\n}\r\n`\r\nconst Div5 = styled.div`\r\n\r\n.card__overviewtext{\r\n  font-size: 12px;\r\n  line-height: 150%;\r\n}`\r\n\r\nconst Weather = (props) => {\r\n\r\n  return (\r\n    <Div1 className=\"card card-skin\">\r\n        <Div2 class=\"card__imgframe\"></Div2>\r\n        <Div3 class=\"card__textbox\">\r\n        <Div4 className=\"card__titletext\">\r\n            {props.city && props.country && <p>地域と国: {props.city}, {props.country}</p>}\r\n            {props.date && <p>日にち: {dayjs(props.date).format(\"dddd\")}</p>} \r\n            {props.date && <p>時刻: {dayjs(props.date).format(\"h:mm\")}</p>}\r\n            {props.date && <p>午前か午後か: {dayjs(props.date).format(\"A\")}</p>}\r\n            {props.temperature && <p>{props.temperature} °C</p>}\r\n            {props.description &&  <p>天気: {props.description}</p>}\r\n            {props.error && <p>{props.error}</p>}\r\n            {props.recommendation && <p>{props.recommendation}</p>}\r\n        </Div4>\r\n        <Div5 className=\"card__overviewtext\">\r\n\r\n          Forecastだよ\r\n        </Div5>\r\n        </Div3>\r\n    </Div1>\r\n  )\r\n}\r\n\r\nexport default Weather\r\n\r\n\r\n// import {\r\n//     Card,\r\n//     CardContent,\r\n//     CardHeader,\r\n//     CardMedia,\r\n//     Divider,\r\n//     Typography,\r\n//     Grid\r\n//   } from \"@material-ui/core\";\r\n\r\n\r\n// const useStyles = makeStyles(theme => ({\r\n// atmospheric: {\r\n//   fontSize: \"28px\",\r\n//   padding: \"5px\"\r\n// },\r\n// buttons: {\r\n//   color: \"black\"\r\n// },\r\n// card: {\r\n//   minWidth: 600,\r\n//   minHeight: 600\r\n// },\r\n// container: {\r\n//   display: \"flex\",\r\n//   flexWrap: \"wrap\"\r\n// },\r\n// error: {\r\n//   color: \"red\",\r\n//   padding: \"10px\"\r\n// },\r\n// fullList: {\r\n//   width: \"auto\"\r\n// },\r\n// layout: {\r\n//   marginTop: \"20px\"\r\n// },\r\n\r\n// paper: {\r\n//   padding: theme.spacing(2),\r\n//   textAlign: \"center\",\r\n//   color: theme.palette.text.secondary\r\n// },\r\n// recommendation: {\r\n//   fontFamily: \"Montserrat, sans-serif\",\r\n//   padding: \"20px 0px 10px 0px\",\r\n//   fontSize: \"26px\",\r\n//   textAlign: \"center\"\r\n// },\r\n// root: {\r\n//   flexiGrow: 1,\r\n//   color: \"black\"\r\n// },\r\n// search: {\r\n//   marginTop: \"100px\"\r\n// },\r\n// wi: {\r\n//   color: \"#673ab7\"\r\n// }\r\n// }));\r\n\r\n// export default function Weather(props) {\r\n//     const classes = useStyles();\r\n\r\n//     return (\r\n//         <div>\r\n//             <Grid container spacing={3}>\r\n//                 <Grid item xs={12}>\r\n//                     <WeatherCard\r\n//                         city={props.city}\r\n//                         country={props.country}\r\n//                         weather={props.weather}\r\n//                         icon={props.icon}\r\n//                         temperature={props.temperature}\r\n                    \r\n                    \r\n                    \r\n//                     />\r\n\r\n    \r\n          \r\n\r\n//                 </Grid>\r\n//             </Grid>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n\r\n// const WeatherCard = (props) => {\r\n//     const classes = useStyles();\r\n//     const humidity = \"wi wi-humidity\";\r\n//     const strongWind = \"wi wi-strong-wind\";\r\n\r\n//     return (\r\n//        <Card className={classes.card}>\r\n//            <CardHeader\r\n//                 title={props.city + \", \" + props.country}\r\n//                 // subheader={<WeatherCardSubheader weather={props.weather} />}\r\n//             />\r\n//             <CardContent>\r\n//                 <CardMedia\r\n//                     className={`${props.icon} ${classes.wi}`}\r\n//                     src={props.icon}\r\n//                     style={{ fontSize: \"128px\", float: \"right\" }}\r\n//                 />\r\n//                 {/* 気温 */}\r\n//                 <Typography\r\n//                     variant=\"h2\"\r\n//                     className=\"big-temp\"\r\n//                     color=\"textPrimary\"\r\n//                     component=\"h2\"\r\n//                     style={{ fontFamily: \"Montserrat\", paddingTop: \"30px\" }}\r\n//                 >\r\n//                     {Math.round(props.temperature)}&deg;C\r\n//                 </Typography>\r\n\r\n//                 {/* <Typography\r\n//                     variant=\"subtitle2\"\r\n//                     className=\"atmospheric-conditions\"\r\n//                     color=\"textSecondary\"\r\n//                     gutterBottom\r\n//                     style={{ paddingTop: \"40px\" }}\r\n//                 >\r\n//                 <span\r\n//                     className={`${strongWind} ${classes.wi} ${classes.atmospheric}`}\r\n//                 ></span>\r\n//                 {/* 風速 */}\r\n//                     {/* {props.wind_speed} km/h Winds{\" \"}\r\n//                 <span\r\n//                     className={`${humidity} ${classes.wi} ${classes.atmospheric}`}\r\n//                 ></span>\r\n//                     {props.humidity}% Humidity\r\n//                 </Typography> */} \r\n\r\n//                 {/* アドバイス（recommendコンポーネント) */}\r\n//                 <Typography\r\n//                     className={`${classes.recommendation} recommendation`}\r\n//                     color=\"textPrimary\"\r\n//                     gutterBottom\r\n//                 >\r\n//                     {props.recommendation}\r\n//                 </Typography>\r\n//                 <Divider variant=\"middle\" />\r\n//                 {/* 下の詳細欄 */}\r\n//                 {/* <Forecast forecast={forecast} /> */}\r\n\r\n//             </CardContent>\r\n               \r\n//        </Card>\r\n//     )\r\n\r\n// }\r\n\r\n\r\n\r\n","import React,{useState} from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\nimport * as recommendations from \"./recommendations.json\";\r\n// Import Search from \"./Search\"\r\n// import styled from \"styled-components\";\r\n// import Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n//styled-components\r\n\r\n// const Div = styled.div `\r\n//   min-height:100vh;\r\n\r\n// .errorMessage {\r\n//   margin: 0 auto;\r\n// }\r\n\r\n// ` \r\n\r\n//styled-components 終了\r\n\r\n\r\n\r\nconst App =() =>{\r\n  const [weather, setWeather] = React.useState([])\r\n  const APIKEY = `4ceb0fa6fd7e05f54a5b2b782fc11334`\r\n\r\n  async function fetchData(e) {\r\n    const city =e.target.elements.city.value\r\n    const country = e.target.elements.country.value\r\n    e.preventDefault()\r\n    const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKEY}`)\r\n      .then(res=> res.json())\r\n      .then(data=> data)\r\n      if(city && country) {\r\n\r\n        setWeather({\r\n          data: apiData,\r\n          // 地域や国\r\n          city: apiData.name,\r\n          country: apiData.sys.country,\r\n          // 曜日\r\n          date: apiData.dt * 1000,\r\n          // description\r\n          description: apiData.weather[0].description,\r\n          // 気温\r\n          temperature: Math.round(apiData.main.temp -273.15),\r\n          recommendation: recommendations.default[apiData.weather[0].id].recommendation,\r\n          icon: apiData.weather[0].icon,\r\n          error:\"\"\r\n      \r\n        }\r\n      )} else {\r\n        setWeather({\r\n          data: '',\r\n          city: '',\r\n          country: '',\r\n          date: '',\r\n          description: '',\r\n          temperature: '',\r\n          recommendation: '',\r\n          icon: '',\r\n          error:\"Please Type A City And Country\"\r\n        }\r\n        )}\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>WEATHER APP</h3>\r\n      <Form getWeather={fetchData} />\r\n      {console.log(weather.data)}\r\n      <Weather\r\n      weather={weather}\r\n      city={weather.city}\r\n      country={weather.country}\r\n      date={weather.date}\r\n      description={weather.description}\r\n      temperature={weather.temperature}\r\n      recommendation={weather.recommendation}\r\n      icon={weather.icon}\r\n      error={weather.error}\r\n      />\r\n      {console.log(weather.data)}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}